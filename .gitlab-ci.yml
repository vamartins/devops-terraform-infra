include:
  - project: templates/infra-pipelines
    file:
      - terraform-gitlab-pipeline.yml
      - terraform-sec.yml


.variables: &variables
  TF_ROOT: $CI_PROJECT_DIR/infra/
  GIT_USER_USERNAME: $GIT_USER_USERNAME
  #terraform's variables
  TF_VAR_application_name: $CI_PROJECT_NAME
  TF_VAR_logs_path: /logs
  TF_VAR_aws_region: $AWS_REGION
  TF_VAR_aws_deployment_role: deployment_role_todo

.dev_variables: &dev_variables
  ENVIRONMENT: dev
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_DEV
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_DEV
  #terraform's variables
  TF_VAR_environment: $ENVIRONMENT
  TF_VAR_aws_account_number: $AWS_ACCOUNT_ID


stages:
  - prepare
  - validate
  - build
  - deploy

init:
  stage: prepare
  script:
    - gitlab-terraform init

validate:
  stage: validate
  script:
    - gitlab-terraform init
    - gitlab-terraform validate

plan:
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Separate apply job for manual launching Terraform as it can be destructive
# action.
apply:
  stage: deploy
  environment:
    name: production
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  when: manual
  only:
    - master
